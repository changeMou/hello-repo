// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply from: './rootConfig.gradle'
buildscript {
    
    repositories {
//        jcenter()
        maven { url "https://www.jitpack.io" }
        def REPOSITORY_URL = 'http://maven.aliyun.com/nexus/content/groups/public/'
        all { ArtifactRepository repo ->
            if(repo instanceof MavenArtifactRepository){
                def url = repo.url.toString()
                if (url.startsWith('https://repo1.maven.org/maven2') || url.startsWith('https://jcenter.bintray.com/')) {
                    project.logger.lifecycle "Repository ${repo.url} replaced by $REPOSITORY_URL."
                    remove repo
                }
            }
        }
        maven {
            url REPOSITORY_URL
        }
        maven{
            url uri('D:/repos')
        }
        maven{
            url 'http://200.200.200.40:8083/nexus/content/repositories/clife-android-snapshots/'
        }
    }
    dependencies {
        classpath "com.android.tools.build:gradle:2.3.3"
        classpath 'org.codehaus.groovy:gradle-groovy-android-plugin:0.3.6'
        classpath 'com.github.sleep.dolphin:build-gradle:1.0.2-SNAPSHOT'
//        classpath project(':build-gradle')
    }
}

allprojects {
    repositories {
        jcenter()
        maven { url "https://www.jitpack.io" }
        def REPOSITORY_URL = 'http://maven.aliyun.com/nexus/content/groups/public/'
        all { ArtifactRepository repo ->
            if(repo instanceof MavenArtifactRepository){
                def url = repo.url.toString()
                if (url.startsWith('https://repo1.maven.org/maven2') || url.startsWith('https://jcenter.bintray.com/')) {
                    project.logger.lifecycle "Repository ${repo.url} replaced by $REPOSITORY_URL."
                    remove repo
                }
            }
        }
        maven {
            url REPOSITORY_URL
        }
        maven{
            url uri('D:/repos')
        }

		maven{
		   url "add new address"
		}
		
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
